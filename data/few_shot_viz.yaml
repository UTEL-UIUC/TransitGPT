example_1:
    feed: SFMTA
    question: Find the number of trips for route_id '25490' on a typical Friday
    answer: |
        ```python
        # Get friday service_ids
        friday_services = feed.calendar[(feed.calendar['friday'] == 1)]['service_id']

        # Filter trips for route_id '25490' and friday services
        friday_trips = feed.trips[(feed.trips['route_id'] == '25490') & 
                                  (feed.trips['service_id'].isin(friday_services))]

        # Count the trips
        trip_count = friday_trips.shape[0]

        result = {
            'answer': trip_count,
            'additional_info': "This count includes all trips scheduled for fridays according to the calendar, excluding any exceptions in calendar_dates."
        }
        # Note: No plot or map for this example
        ```

example_2:
    feed: SFMTA
    question: Calculate the average trip duration for route_id '25490'
    answer: |
        ```python
        # Filter stop_times for route_id '25490'
        route_25490_trips = feed.trips[feed.trips['route_id'] == '25490']['trip_id']
        route_25490_stop_times = feed.stop_times[feed.stop_times['trip_id'].isin(route_25490_trips)]
        # Merge with feed.trips to get direction_id
        route_25490_stop_times = route_25490_stop_times.merge(feed.trips, on='trip_id')

        # Calculate trip durations
        trip_durations = route_25490_stop_times.groupby(['trip_id','direction_id']).agg({
            'arrival_time': lambda x: (x.max() - x.min()) / 60 # convert to minutes
        })

        # Calculate average duration
        trip_durations = trip_durations.rename(columns={'arrival_time': 'trip_duration'}).reset_index()
        avg_duration = trip_durations['trip_duration'].mean()

        # Create the plot
        color_map = {direction: px.colors.qualitative.Set1[i] for i, direction in enumerate(trip_durations['direction_id'].unique())}
        fig = px.histogram(trip_durations, x='trip_duration', 
                            color='direction_id',
                            title='Distribution of Trip Durations for Route 25490', 
                            labels={"trip_duration": "Trip Duration (min)", "direction_id": "Direction ID"},
                            color_discrete_map = color_map)
        fig.update_layout(legend_title_text='Direction')

        result = {
            'answer': avg_duration,  # This is a timedelta object
            'additional_info': f"This calculation is based on {len(trip_durations)} trips.",
            'plot': fig  # This is a plotly Figure object
        }
        ```

example_3:
    feed: CUMTD
    question: Calculate the headway for GREEN route
    answer: |
        ```python
        route_id = find_route(feed, "GREEN").route_id

        # Assume a direction for the route
        direction_id = feed.trips[feed.trips.route_id == route_id].direction_id.sample(n=1).values[0]

        # Get all trips for the specified route
        route_trips = feed.trips[(feed.trips['route_id'] == route_id) & (feed.trips['direction_id'] == direction_id)]

        if route_trips.empty:
            result = {"answer": None, "additional_info": f"No trips found for route {route_id}"}

        # Get the first stop for each trip
        first_stops = feed.stop_times[feed.stop_times['trip_id'].isin(route_trips['trip_id']) & 
                                      (feed.stop_times['stop_sequence'] == 1)]
        first_stop_id = first_stops['stop_id'].iloc[0]

        first_stops = first_stops.sort_values('arrival_time')
        first_stops['headway_minutes'] = first_stops['arrival_time'].diff() / 60
        first_stops['arrival_hour'] = first_stops['arrival_time'] / 3600

        # Calculate overall average headway
        overall_avg_headway = first_stops['headway_minutes'].mean()

        # Create a plot
        fig = px.box(first_stops, x='arrival_hour', y='headway_minutes', 
                     title=f'Headways Distribution for Route {route_id} Direction {direction_id} (at First Stop {first_stop_id})')
        fig.update_layout(
            xaxis_title="Hour of the day",
            yaxis_title="Headway (minutes)",
        )

        result = {
            'answer': overall_avg_headway,
            'additional_info': (f"Average headway calculated for route {route_id} direction {direction_id} at first stop {first_stop_id}. "
                                f"Headways vary by service_id: {service_headways}"),
            'plot': fig
        }
        # Note headways might vary for stops along the route, we calculate for the first stop only
        ```

example_4:
    feed: Any
    question: Find the longest route in the GTFS feed
    answer: |
        ```python
        # Group shapes by shape_id and calculate total distance for each shape
        shape_distances = feed.shapes.groupby('shape_id').agg({'shape_dist_traveled': 'max'}).reset_index()
        
        # Merge shape distances with trips to get route_id for each shape
        route_distances = pd.merge(feed.trips[['route_id', 'shape_id']], shape_distances, on='shape_id', how='left')
        
        # Group by route_id and find the maximum distance for each route 
        route_max_distances = route_distances.groupby('route_id').agg({'shape_dist_traveled': 'max'}).reset_index()
        
        # Get the longest route
        longest_route = route_max_distances.loc[route_max_distances['shape_dist_traveled'].idxmax()]
        longest_route_info = feed.routes[feed.routes['route_id'] == longest_route['route_id']].iloc[0]
        
        # Create map showing the longest route
        # Get shape points for the longest route
        longest_route_trips = feed.trips[feed.trips['route_id'] == longest_route['route_id']]
        longest_route_shapes = longest_route_trips['shape_id'].unique()
        
        # Create base map centered on first shape point
        center_lat = feed.shapes[feed.shapes['shape_id'] == longest_route_shapes[0]]['shape_pt_lat'].iloc[0]
        center_lon = feed.shapes[feed.shapes['shape_id'] == longest_route_shapes[0]]['shape_pt_lon'].iloc[0]
        m = folium.Map(location=[center_lat, center_lon], zoom_start=12, tiles='CartoDB positron')
        
        # Plot each shape for the route
        for shape_id in longest_route_shapes:
            shape_points = feed.shapes[feed.shapes['shape_id'] == shape_id]
            points = [[row['shape_pt_lat'], row['shape_pt_lon']] 
                      for _, row in shape_points.iterrows()]
        
            # Use route color if available, otherwise default to blue
            route_color = longest_route_info['route_color'] if 'route_color' in longest_route_info else '0000ff'
        
            folium.PolyLine(
                points,
                weight=2,
                color=f'#{route_color}',
                opacity=0.8,
                popup=f"Route: {longest_route_info['route_long_name']}"
            ).add_to(m)
        
        result = {
            'answer': {
                'route_id': longest_route['route_id'],
                'route_name': longest_route_info['route_long_name'],
                'length_km': round(longest_route['shape_dist_traveled']/1000, 2)
            },
            'additional_info': {
                'route_short_name': longest_route_info['route_short_name'],
                'route_type': longest_route_info['route_type'],
                'route_url': longest_route_info['route_url']
            },
            'map': m
        }
        ```

example_5:
    feed: Any
    question: Identify the date when a specific route had the fewest trips in the GTFS feed.
    answer: |
        ```python
        # Specify the route_id we're interested in
        route_id = "25491"

        # Get trips for the specified route
        route_trips = feed.trips[feed.trips["route_id"] == route_id]
        valid_services = set(route_trips.service_id)

        # Count trips per service
        service_trip_count = route_trips.groupby("service_id").size()

        # Get date range
        start_date = feed.feed_info["feed_start_date"].iloc[0]
        end_date = feed.feed_info["feed_end_date"].iloc[0]
        date_range = pd.date_range(start=start_date, end=end_date)
        date_range = [date.date() for date in date_range]

        date_trip_count = {}
        for date in date_range:
            day_of_week = date.strftime("%A").lower()
            
            # Get active services for the date
            active_services = set(feed.calendar[
                (feed.calendar["start_date"] <= date) &
                (feed.calendar["end_date"] >= date) &
                (feed.calendar[day_of_week] == 1)
            ].service_id)
            
            # Apply exceptions
            exceptions = feed.calendar_dates[feed.calendar_dates["date"] == date]
            for _, exception in exceptions.iterrows():
                if exception["exception_type"] == 1:
                    active_services.add(exception["service_id"])
                elif exception["exception_type"] == 2:
                    active_services.discard(exception["service_id"])
            
            # Count trips for active services that are valid for this route
            trips = sum(service_trip_count.get(service, 0) 
                        for service in (active_services & valid_services))
            
            date_trip_count[date] = trips

        # Convert the dictionary to a DataFrame for easier analysis
        trip_count_df = pd.DataFrame.from_dict(date_trip_count, orient='index', columns=['trip_count'])
        trip_count_df = trip_count_df[trip_count_df['trip_count'] > 0]  # Exclude dates with no service

        # Find the date with the minimum number of trips
        min_trips_date = trip_count_df['trip_count'].idxmin()
        min_trips_count = trip_count_df.loc[min_trips_date, 'trip_count']

        # Create the plot
        fig = px.line(trip_count_df.reset_index(), x='index', y='trip_count', 
                      title=f'Trip Counts for Route {route_id}')

        result = {
            'answer': {
                'date': min_trips_date,
                'trip_count': min_trips_count
            },
            'additional_info': f"This analysis covered the period from {start_date} to {end_date}. The route analyzed was {route_id}.",
            'plot': fig  # This is a plotly Figure object
        }
        ```

example_6:
    feed: CUMTD
    question: Find directions from Orchard Downs to Newmark Civil Engineering Laboratory now
    answer: |
        ```python
        import pytz
        from datetime import datetime
        from geopy.distance import geodesic
        
        def format_time_hhmmss(time):
            time = int(time)
            return f"{time // 3600:02d}:{(time % 3600) // 60:02d}:{time % 60:02d}"
        
        # Find stops near origin and destination
        start_stops = find_stops_by_full_name(feed, "Orchard Downs")
        end_stops = find_stops_by_full_name(feed, "Newmark Civil Engineering")
        
        if start_stops.empty or end_stops.empty:
            # Try geocoding if stop names not found
            start_stops = find_stops_by_address(feed, "Orchard Downs, Champaign, IL", 300)[0]
            end_stops = find_stops_by_address(feed, "Newmark Civil Engineering Laboratory, Urbana, IL", 300)[0]
        
        # Get current time in agency timezone
        agency_tz = pytz.timezone(feed.agency.agency_timezone.iloc[0])
        now = datetime.now(agency_tz)
        current_time = now.hour * 3600 + now.minute * 60 + now.second
        current_day = now.strftime("%A").lower()
        
        # Find active services for current day
        active_services = feed.calendar[
            (feed.calendar['start_date'] <= now.date()) &
            (feed.calendar['end_date'] >= now.date()) &
            (feed.calendar[current_day] == 1)
        ]['service_id']
        
        # Get trips in the next hour
        next_hour = current_time + 3600
        stop_times = feed.stop_times[
            (feed.stop_times['departure_time'] >= current_time) &
            (feed.stop_times['departure_time'] <= next_hour)
        ]
        
        # Find trips that serve both stops
        possible_trips = []
        for _, start_stop in start_stops.iterrows():
            for _, end_stop in end_stops.iterrows():
                start_times = stop_times[stop_times['stop_id'] == start_stop['stop_id']]
                for _, start_time in start_times.iterrows():
                    trip_stops = stop_times[stop_times['trip_id'] == start_time['trip_id']]
                    end_times = trip_stops[trip_stops['stop_id'] == end_stop['stop_id']]
        
                    if not end_times.empty:
                        end_time = end_times.iloc[0]
                        if end_time['stop_sequence'] > start_time['stop_sequence']:
                            trip = feed.trips[feed.trips['trip_id'] == start_time['trip_id']].iloc[0]
                            route = feed.routes[feed.routes['route_id'] == trip['route_id']].iloc[0]
        
                            possible_trips.append({
                                'start_stop': start_stop,
                                'end_stop': end_stop,
                                'start_time': start_time['departure_time'],
                                'end_time': end_time['arrival_time'],
                                'route': route,
                                'trip': trip
                            })
        
        # Create map
        m = folium.Map(
            location=[start_stops.iloc[0]['stop_lat'], start_stops.iloc[0]['stop_lon']],
            zoom_start=14,
            tiles='CartoDB positron'
        )
        
        # Add markers for start and end stops
        folium.Marker(
            [start_stops.iloc[0]['stop_lat'], start_stops.iloc[0]['stop_lon']], 
            popup=f"Start: {start_stops.iloc[0]['stop_name']}",
            icon=folium.Icon(color='green')
        ).add_to(m)
        
        folium.Marker(
            [end_stops.iloc[0]['stop_lat'], end_stops.iloc[0]['stop_lon']],
            popup=f"End: {end_stops.iloc[0]['stop_name']}", 
            icon=folium.Icon(color='red')
        ).add_to(m)
        
        if possible_trips:
            # Get best trip (earliest departure)
            best_trip = min(possible_trips, key=lambda x: x['start_time'])
        
            # Get route shape points
            shape_points = feed.shapes[
                feed.shapes['shape_id'] == best_trip['trip']['shape_id']
            ].sort_values('shape_pt_sequence')
        
            # Draw route line
            route_color = f"#{best_trip['route']['route_color']}" if pd.notna(best_trip['route']['route_color']) else '#3388ff'
            points = [[row['shape_pt_lat'], row['shape_pt_lon']] for _, row in shape_points.iterrows()]
            folium.PolyLine(
                points,
                weight=3,
                color=route_color,
                opacity=0.8
            ).add_to(m)
        
            # Calculate distance
            distance = geodesic(
                (best_trip['start_stop']['stop_lat'], best_trip['start_stop']['stop_lon']),
                (best_trip['end_stop']['stop_lat'], best_trip['end_stop']['stop_lon'])
            ).kilometers
        
            result = {
                'answer': f"Take {best_trip['route']['route_long_name']} from {best_trip['start_stop']['stop_name']} at {format_time_hhmmss(best_trip['start_time'])} to {best_trip['end_stop']['stop_name']}, arriving at {format_time_hhmmss(best_trip['end_time'])}",
                'additional_info': f"Travel time: {(best_trip['end_time'] - best_trip['start_time'])//60} minutes\nDistance: {distance:.1f} km",
                'map': m
            }
        else:
            result = {
                'answer': "No direct routes found in the next hour between these locations.",
                'additional_info': "Try checking other times or consider alternative routes with transfers.",
                'map': m
            }
        ```

example_7:
    feed: CUMTD
    question: Find the stop at University St and Victor Ave
    answer: |
        ```python
        # Find stops at the intersection of University and Victor
        matched_stops = find_stops_by_intersection(feed, "University", "Victor")
        
        # If no direct matches found, try geocoding the address
        if matched_stops.empty:
            matched_stops = find_stops_by_address(feed, "University St and Victor Ave, Urbana, IL", radius_meters=200)[0]
        
        # Create map centered on the intersection
        if not matched_stops.empty:
            m = folium.Map(
                location=[matched_stops.iloc[0]['stop_lat'], matched_stops.iloc[0]['stop_lon']], 
                zoom_start=17,
                tiles='CartoDB positron'
            )
        
            # Add markers for each matched stop
            for _, stop in matched_stops.iterrows():
                folium.Marker(
                    [stop['stop_lat'], stop['stop_lon']],
                    popup=f"Stop: {stop['stop_name']}<br>ID: {stop['stop_id']}",
                    icon=folium.Icon(color='red')
                ).add_to(m)
        
            result = {
                'answer': f"Found {len(matched_stops)} stop(s) near University St and Victor Ave:",
                'additional_info': "",
                'map': m
            }
        
            for _, stop in matched_stops.iterrows():
                result['additional_info'] += f"\nStop Name: {stop['stop_name']}\n"
                result['additional_info'] += f"Stop ID: {stop['stop_id']}\n"
                if 'distance' in stop:
                    result['additional_info'] += f"Distance from intersection: {stop['distance']:.0f} meters\n"
        else:
            result = {
                'answer': "No stops found at University St and Victor Ave",
                'additional_info': "Unable to locate any bus stops near this intersection. Please verify the street names or try searching nearby intersections."
            }
        ```

example_8:
    feed: DART
    question: Find all mid block stops on Illinois
    answer: |
        ```python
        # Find stops on Illinois street
        illinois_stops = find_stops_by_street(feed, "Illinois", threshold=80)

        # Filter for mid-block stops
        mid_block_stops = illinois_stops[illinois_stops['stop_name'].str.contains('MB', case=False, na=False)]

        # Create a GeoDataFrame for mapping
        gdf = gpd.GeoDataFrame(
            mid_block_stops, 
            geometry=gpd.points_from_xy(mid_block_stops.stop_lon, mid_block_stops.stop_lat),
            crs="EPSG:4326"
        )

        # Create an interactive map
        m = gdf.explore(
            column="stop_name",
            tooltip=["stop_name", "stop_id"], # Tooltip must be a column name
            popup=True,
            name="Mid-block Stops",
            style_kwds={"color": "red"},
            tiles="CartoDB Positron"
        )

        # Add a title to the map
        title_html = '''
                    <h3 align="center" style="font-size:16px"><b>Mid-block Stops on Illinois Street</b></h3>
                    '''
        m.get_root().html.add_child(folium.Element(title_html))

        result = {
            'answer': f"Found {len(mid_block_stops)} mid-block stops on Illinois street.",
            'additional_info': mid_block_stops[['stop_id', 'stop_name', 'stop_desc']].to_dict('records'),
            'map': m
        }
        ```

example_9:
    feed: CTA
    question: Map all routes that operate post midnight
    answer: |
        ```python
        # Function to convert shape points to a LineString
        def shape_to_linestring(shape_df):
            return LineString(shape_df[['shape_pt_lon', 'shape_pt_lat']].values)
        
        # Identify routes operating after midnight
        late_night_trips = feed.stop_times[feed.stop_times['departure_time'] > 86400]
        late_night_routes = feed.trips[feed.trips['trip_id'].isin(late_night_trips['trip_id'])]['route_id'].unique()
        
        # Get unique shapes for these routes
        late_night_shapes = feed.trips[feed.trips['route_id'].isin(late_night_routes)]['shape_id'].unique()
        
        # Create a map centered on the mean coordinates of all stops
        center_lat = feed.stops['stop_lat'].mean()
        center_lon = feed.stops['stop_lon'].mean()
        m = folium.Map(location=[center_lat, center_lon], zoom_start=12, tiles='CartoDB positron')
        
        # Plot each route
        for shape_id in late_night_shapes:
            shape_points = feed.shapes[feed.shapes['shape_id'] == shape_id]
            if not shape_points.empty:
                linestring = shape_to_linestring(shape_points)
                route_id = feed.trips[feed.trips['shape_id'] == shape_id]['route_id'].iloc[0]
                route_color = feed.routes[feed.routes['route_id'] == route_id]['route_color'].iloc[0]
                color = f"#{route_color}" if pd.notna(route_color) else 'blue'
        
                folium.PolyLine(
                    locations=list(zip(linestring.coords.xy[1], linestring.coords.xy[0])),
                    color=color,
                    weight=2,
                    opacity=0.8,
                    popup=f"Route: {route_id}"
                ).add_to(m)
        
        # Add a legend
        legend_html = '''
        <div style="position: fixed; bottom: 50px; left: 50px; width: 220px; height: 60px; 
            border:2px solid grey; z-index:9999; font-size:14px; background-color:white;
            ">&nbsp; <b>Legend</b> <br>
            &nbsp; Lines: Routes operating after midnight
        </div>
        '''
        m.get_root().html.add_child(folium.Element(legend_html))
        
        result = {
            "answer": f"Map of {len(late_night_routes)} routes operating after midnight",
            "additional_info": "The map shows all routes that have trips departing after midnight (00:00). Each route is represented by a colored line on the map.",
            "map": m
        }
        ```

example_10:
    feed: CUMTD
    question: How far does the Orange route travel from University and Victor to University and Fourth in the eastbound direction?
    answer: |
        ```python
        # Find the Orange route
        orange_route = find_route(feed, "Orange")
        if orange_route is None:
            result = {
                'answer': "Could not find the Orange route",
                'additional_info': "Please check if the route name is correct."
            }
        else:
            route_id = orange_route['route_id']
        
            # Find the stops at the intersections
            start_stops = find_stops_by_intersection(feed, "University", "Victor") 
            end_stops = find_stops_by_intersection(feed, "University", "Fourth")
        
            if start_stops.empty or end_stops.empty:
                result = {
                    'answer': "Could not find one or both of the specified stops",
                    'additional_info': "Please check if the intersection names are correct."
                }
            else:
                # Get eastbound trips for the Orange route
                orange_trips = feed.trips[feed.trips['route_id'] == route_id]
                eastbound_trips = orange_trips[orange_trips['direction_id'] == 0]
        
                if eastbound_trips.empty:
                    result = {
                        'answer': "Could not find eastbound trips for the Orange route",
                        'additional_info': "Please check if the route has eastbound service."
                    }
                else:
                    # Get stop times for eastbound trips
                    stop_times = feed.stop_times[feed.stop_times['trip_id'].isin(eastbound_trips['trip_id'])]
        
                    # Find a trip that serves both stops
                    valid_trip = None
                    start_stop = None
                    end_stop = None
        
                    for trip_id in eastbound_trips['trip_id']:
                        trip_stops = stop_times[stop_times['trip_id'] == trip_id]
                        trip_start = start_stops[start_stops['stop_id'].isin(trip_stops['stop_id'])]
                        trip_end = end_stops[end_stops['stop_id'].isin(trip_stops['stop_id'])]
        
                        if not trip_start.empty and not trip_end.empty:
                            valid_trip = trip_id
                            start_stop = trip_start.iloc[0]
                            end_stop = trip_end.iloc[0]
                            break
        
                    if valid_trip is None:
                        result = {
                            'answer': "Could not find a trip that serves both stops",
                            'additional_info': "The stops might not be on the same Orange route trip."
                        }
                    else:
                        # Get the stop times for the valid trip
                        trip_stops = stop_times[stop_times['trip_id'] == valid_trip].sort_values('stop_sequence')
        
                        # Calculate distance using shape_dist_traveled
                        start_dist = trip_stops[trip_stops['stop_id'] == start_stop['stop_id']]['shape_dist_traveled'].iloc[0]
                        end_dist = trip_stops[trip_stops['stop_id'] == end_stop['stop_id']]['shape_dist_traveled'].iloc[0]
        
                        distance = end_dist - start_dist
                        distance_km = distance / 1000  # Convert to kilometers
        
                        # Get the shape for this trip
                        shape_id = eastbound_trips[eastbound_trips['trip_id'] == valid_trip]['shape_id'].iloc[0]
                        route_shape = feed.shapes[feed.shapes['shape_id'] == shape_id].sort_values('shape_pt_sequence')
        
                        # Create the map
                        center_lat = (start_stop['stop_lat'] + end_stop['stop_lat']) / 2
                        center_lon = (start_stop['stop_lon'] + end_stop['stop_lon']) / 2
        
                        m = folium.Map(location=[center_lat, center_lon], 
                                     zoom_start=14,
                                     tiles='CartoDB positron')
        
                        # Plot the route line
                        route_coords = [[row['shape_pt_lat'], row['shape_pt_lon']] for _, row in route_shape.iterrows()]
                        folium.PolyLine(route_coords, 
                                      color=f"#{orange_route['route_color']}" if 'route_color' in orange_route else 'blue',
                                      weight=3,
                                      opacity=0.8).add_to(m)
        
                        # Add markers for start and end stops
                        folium.Marker(
                            [start_stop['stop_lat'], start_stop['stop_lon']],
                            popup=f"Start: {start_stop['stop_name']}",
                            icon=folium.Icon(color='green')
                        ).add_to(m)
        
                        folium.Marker(
                            [end_stop['stop_lat'], end_stop['stop_lon']],
                            popup=f"End: {end_stop['stop_name']}",
                            icon=folium.Icon(color='red')
                        ).add_to(m)
        
                        result = {
                            'answer': f"The Orange route travels {distance_km:.2f} kilometers from {start_stop['stop_name']} to {end_stop['stop_name']} in the eastbound direction.",
                            'additional_info': f"Start Stop: {start_stop['stop_name']} (ID: {start_stop['stop_id']})\n"
                                             f"End Stop: {end_stop['stop_name']} (ID: {end_stop['stop_id']})\n"
                                             f"Route: {orange_route['route_long_name']}",
                            'map': m
                        }
        ```

example_11:
    feed: CUMTD
    question: Find directions from University and Victor to Illinois Terminal
    answer: |
        ```python
        # Function to check if a trip is circular
        def is_circular_trip(stop_times):
            first_stop = stop_times.iloc[0]['stop_id']
            last_stop = stop_times.iloc[-1]['stop_id']
            return first_stop == last_stop

        # Get all unique route_ids
        all_routes = feed.routes['route_id'].unique()

        circular_routes = []

        # Progress bar
        total_routes = len(all_routes)
        my_bar = st.progress(0, text="Analyzing routes. Please wait.")

        for i, route_id in enumerate(all_routes):
            # Update progress bar
            percent_complete = int((i + 1) / total_routes * 100)
            progress_text = f"Analyzing Routes: {percent_complete}% complete. Current Route: {route_id}"
            my_bar.progress(percent_complete, text=progress_text)

            # Get all trips for this route
            route_trips = feed.trips[feed.trips['route_id'] == route_id]['trip_id']

            # Check if any trip of this route is circular
            for trip_id in route_trips:
                trip_stops = feed.stop_times[feed.stop_times['trip_id'] == trip_id].sort_values('stop_sequence')
                if is_circular_trip(trip_stops):
                    circular_routes.append(route_id)
                    break  # If we found a circular trip, no need to check other trips of this route

        # Remove duplicates
        circular_routes = list(set(circular_routes))

        # Get route details
        circular_route_details = feed.routes[feed.routes['route_id'].isin(circular_routes)]

        # Create a map
        center_lat = feed.stops['stop_lat'].mean()
        center_lon = feed.stops['stop_lon'].mean()
        m = folium.Map(location=[center_lat, center_lon], zoom_start=11, tiles='CartoDB positron')

        # Create a color palette for routes
        color_palette = px.colors.qualitative.Plotly

        # Create a feature group for the legend
        feature_group = folium.FeatureGroup(name="Circular Routes")
        m.add_child(feature_group)

        # Plot each circular route
        for i, route_id in enumerate(circular_routes):
            # Get all shape_ids for this route
            route_shape_ids = feed.trips[feed.trips['route_id'] == route_id]['shape_id'].unique()

            for shape_id in route_shape_ids:
                shape_points = feed.shapes[feed.shapes['shape_id'] == shape_id].sort_values('shape_pt_sequence')

                # Get route information
                route_name = feed.routes[feed.routes['route_id'] == route_id]['route_long_name'].iloc[0]

                # Create a line from the shape points
                line = list(zip(shape_points['shape_pt_lat'], shape_points['shape_pt_lon']))

                # Add to map
                color = color_palette[i % len(color_palette)]

                folium.PolyLine(
                    locations=line,
                    color=color,
                    weight=3,
                    opacity=0.8,
                    tooltip=f"Route: {route_name}"
                ).add_to(feature_group)

        # Add layer control to toggle the legend
        folium.LayerControl().add_to(m)

        # Prepare the result
        result = {
            "answer": f"Found {len(circular_routes)} circular routes.",
            "additional_info": "Circular routes are those where the first and last stop are the same for at least one trip. "
                            "The following routes are circular:\n\n" + 
                            circular_route_details[['route_id', 'route_short_name', 'route_long_name']].to_string(index=False),
            "map": m
        }

        # The result dictionary now contains the answer, additional information, and the map
        ```

example_12:
    feed: SFMTA
    question: Find the average speed for the route KBus
    answer: |
        ```python
        # Find the KBus route
        kbus_route = find_route(feed, "KBus")
        if kbus_route is None:
            result = {
                'answer': "Could not find the KBus route",
                'additional_info': "Please check if the route name is correct."
            }
        else:
            route_id = kbus_route['route_id']
        
            # Get all trips for the KBus route
            kbus_trips = feed.trips[feed.trips['route_id'] == route_id]
        
            if kbus_trips.empty:
                result = {
                    'answer': "No trips found for the KBus route",
                    'additional_info': "Please check if the route has any scheduled trips."
                }
            else:
                # Get stop times for these trips
                stop_times = feed.stop_times[feed.stop_times['trip_id'].isin(kbus_trips['trip_id'])]
        
                # Calculate the total travel time for each trip
                trip_durations = stop_times.groupby('trip_id').agg({
                    'arrival_time': 'max',
                    'departure_time': 'min',
                    'shape_dist_traveled': 'max'
                }).reset_index()
        
                # Calculate the duration in seconds for each trip
                trip_durations['duration'] = trip_durations['arrival_time'] - trip_durations['departure_time']
        
                # Calculate average speed in km/h (distance in kilometers, time in hours)
                trip_durations['average_speed'] = (trip_durations['shape_dist_traveled'] / (trip_durations['duration'] / 3600)).fillna(0)
        
                # Get the maximum average speed
                average_speed = trip_durations['average_speed'].mean()
        
                result = {
                    'answer': average_speed,
                    'additional_info': f"The average speed for the KBus route is {average_speed:.2f} km/h."
                }
        ```