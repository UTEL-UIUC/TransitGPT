{
    "example_1": {
        "question": "Identify the date when a specific route had the fewest trips in the GTFS feed.",
        "answer": "import pandas as pd\nfrom datetime import timedelta\n\n# Specify the route_id we're interested in\nroute_id = 'TEAL_SUNDAY'\n\n# Get the date range from feed_info\nstart_date = feed.feed_info['feed_start_date'].iloc[0]\nend_date = feed.feed_info['feed_end_date'].iloc[0]\ndate_range = pd.date_range(start=start_date, end=end_date)\n\n# Get trips for the specified route\nroute_trips = feed.trips[feed.trips['route_id'] == route_id]\n\n# Get the services for these trips\nservices = feed.calendar[feed.calendar['service_id'].isin(route_trips['service_id'])]\n\n# Initialize a dictionary to store trip counts for each date\ntrip_counts = {date.date(): 0 for date in date_range}\n\n# Count trips for regular service\nfor _, service in services.iterrows():\n    service_start = service['start_date']\n    service_end = service['end_date']\n    service_dates = pd.date_range(start=service_start, end=service_end)\n\n    for date in service_dates:\n        if date.dayofweek == 6 and service['sunday'] == 1:  # Assuming TEAL_SUNDAY runs on Sundays\n            trip_counts[date] += len(route_trips[route_trips['service_id'] == service['service_id']])\n\n# Adjust for calendar_dates exceptions\nfor _, exception in feed.calendar_dates.iterrows():\n    if exception['service_id'] in route_trips['service_id'].values:\n        date = exception['date']\n        if exception['exception_type'] == 1:  # Service added\n            trip_counts[date] += len(route_trips[route_trips['service_id'] == exception['service_id']])\n        elif exception['exception_type'] == 2:  # Service removed\n            trip_counts[date] = 0\n\n# Convert the dictionary to a DataFrame for easier analysis\ntrip_count_df = pd.DataFrame.from_dict(trip_counts, orient='index', columns=['trip_count'])\ntrip_count_df = trip_count_df[trip_count_df['trip_count'] > 0]  # Exclude dates with no service\n\n# Find the date with the minimum number of trips\nmin_trips_date = trip_count_df['trip_count'].idxmin()\nmin_trips_count = trip_count_df.loc[min_trips_date, 'trip_count']\n\nresult = {\n    'date': min_trips_date,\n    'trip_count': min_trips_count\n}\n# Result is a dictionary with 'date' (datetime.date) and 'trip_count' (int)"
    },
    "example_2":{
        "question": "Find the number of trips for route_id '1' on Mondays",
        "answer": "To solve the problem of finding the number of trips for `route_id '1'` on mondays, we can follow these steps:\n\n1. Identify the service_ids that are applicable by checking the calendar DataFrame for Monday.\n2. Filter the trips DataFrame to include those that correspond to `route_id '1'` and fall under the previously identified monday service_ids.\n3. Count the resulting trips.\n\nHereâ€™s the Python code to implement this:\n\n```python\n# Get Monday service_ids\nmonday_services = feed.calendar[(feed.calendar['monday'] == 1)]['service_id']\n\n# Filter trips for route_id '1' and monday services\nmonday_trips = feed.trips[(feed.trips['route_id'] == '1') & \n                           (feed.trips['service_id'].isin(monday_services))]\n\n# Step 3: Store the result (number of trips)\nresult = monday_trips.shape[0]\n# Result is an integer representing the number of trips\n```"
    },
    "example_3":{
        "question": "Find the longest route in the GTFS feed",
        "answer": "# Group shapes by shape_id and calculate total distance for each shape\nshape_distances = feed.shapes.groupby('shape_id').agg({'shape_dist_traveled': 'max'}).reset_index()\n\n# Merge shape distances with trips to get route_id for each shape\nroute_distances = pd.merge(feed.trips[['route_id', 'shape_id']], shape_distances, on='shape_id', how='left')\n\n# Group by route_id and find the maximum distance for each route\nroute_max_distances = route_distances.groupby('route_id').agg({'shape_dist_traveled': 'max'}).reset_index()\n\n# Get the longest route\nlongest_route = route_max_distances.loc[route_max_distances['shape_dist_traveled'].idxmax(), 'route_id']\n\n# Get the route information for the longest route\nlongest_route_info = feed.routes[feed.routes['route_id'] == longest_route].iloc[0]\n\n# Result is a row from the feed.routes DataFrame corresponding to the longest route\nresult = longest_route_info"
    },
    "example_4":{
        "question": "Calculate the average trip duration for route_id '1'",
        "answer": "# Filter stop_times for route_id '1'\nroute_1_trips = feed.trips[feed.trips['route_id'] == '1']['trip_id']\nroute_1_stop_times = feed.stop_times[feed.stop_times['trip_id'].isin(route_1_trips)]\n\n# Calculate trip durations\ntrip_durations = route_1_stop_times.groupby('trip_id').agg({\n    'arrival_time': lambda x: x.max() - x.min()\n})\n\n# Calculate average duration\nresult = trip_durations['arrival_time'].mean()\n# Result is a timedelta object representing the average trip duration"
    },
    "example_5":{
        "question": "Calculate the headway for a given route",
        "answer": "# Filter stop_times for route_id '1'\nroute_1_trips = feed.trips[feed.trips['route_id'] == '1']['trip_id']\nroute_1_stop_times = feed.stop_times[feed.stop_times['trip_id'].isin(route_1_trips)]\n\n# Get unique stops\nunique_stops = route_1_stop_times['stop_id'].nunique()\n\n# Result is an integer representing the number of unique stops\nresult = unique_stops"
    },
    
}